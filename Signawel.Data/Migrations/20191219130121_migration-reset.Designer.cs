// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Signawel.Data;

namespace Signawel.Data.Migrations
{
    [DbContext(typeof(SignawelDbContext))]
    [Migration("20191219130121_migration-reset")]
    partial class migrationreset
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Signawel.Domain.BBox.BBox", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bbox_id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("SchemaId")
                        .HasColumnName("schema_id");

                    b.HasKey("Id");

                    b.HasIndex("SchemaId");

                    b.ToTable("bboxes");
                });

            modelBuilder.Entity("Signawel.Domain.BBox.BBoxPoint", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("point_id");

                    b.Property<string>("BBoxId")
                        .HasColumnName("bbox_id");

                    b.Property<int>("Order")
                        .HasColumnName("order");

                    b.Property<double>("X")
                        .HasColumnName("x");

                    b.Property<double>("Y")
                        .HasColumnName("y");

                    b.HasKey("Id");

                    b.HasIndex("BBoxId");

                    b.ToTable("bbox_points");
                });

            modelBuilder.Entity("Signawel.Domain.BlacklistEmail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("blacklist_emails");
                });

            modelBuilder.Entity("Signawel.Domain.Determination.DeterminationAnswer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("answer_id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnName("answer");

                    b.Property<string>("NodeId")
                        .HasColumnName("node_id");

                    b.Property<string>("ParentNodeId")
                        .HasColumnName("parent_node_id");

                    b.HasKey("Id");

                    b.HasIndex("NodeId")
                        .IsUnique()
                        .HasFilter("[node_id] IS NOT NULL");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("determination_graph_answers");
                });

            modelBuilder.Entity("Signawel.Domain.Determination.DeterminationGraph", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("determination_graph_id");

                    b.Property<string>("StartId")
                        .HasColumnName("start_node_id");

                    b.HasKey("Id");

                    b.HasIndex("StartId")
                        .IsUnique()
                        .HasFilter("[start_node_id] IS NOT NULL");

                    b.ToTable("determination_graphs");
                });

            modelBuilder.Entity("Signawel.Domain.Determination.DeterminationNode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("node_id");

                    b.Property<string>("Question")
                        .HasColumnName("question");

                    b.Property<string>("QuestionDescription");

                    b.Property<string>("SchemaId")
                        .HasColumnName("schema_id");

                    b.Property<byte>("Type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("determination_graph_nodes");
                });

            modelBuilder.Entity("Signawel.Domain.Image", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("image_id");

                    b.Property<string>("ImagePath")
                        .HasColumnName("image_path");

                    b.HasKey("Id");

                    b.ToTable("images");
                });

            modelBuilder.Entity("Signawel.Domain.LoginRecord", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("IpAddress")
                        .HasColumnName("ip_address");

                    b.Property<bool>("Succes")
                        .HasColumnName("succes");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("login_records");
                });

            modelBuilder.Entity("Signawel.Domain.PriorityEmail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("EmailSuffix")
                        .IsRequired()
                        .HasColumnName("email_suffix")
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("priority_emails");
                });

            modelBuilder.Entity("Signawel.Domain.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnName("expiry_date");

                    b.Property<bool>("Invalidated");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnName("jwt_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("token");

                    b.Property<bool>("Used");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("Signawel.Domain.ReportGroups.City", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("cities");

                    b.HasData(
                        new
                        {
                            Id = "a1c5d266-4f21-4e8c-8f54-34cc63464fae",
                            Name = "Alken"
                        },
                        new
                        {
                            Id = "c3ae6f57-5915-4013-9fc7-030e3ffd31c0",
                            Name = "As"
                        },
                        new
                        {
                            Id = "8afd1cb8-de3b-4f5a-ba0f-1a4513286754",
                            Name = "Beringen"
                        },
                        new
                        {
                            Id = "a803b0e8-e84e-41dd-84b7-bd6e42a2603c",
                            Name = "Bilzen"
                        },
                        new
                        {
                            Id = "e1ea5cba-3e09-4aea-bf2b-66db5a42571b",
                            Name = "Bocholt"
                        },
                        new
                        {
                            Id = "0e397f19-e638-4c41-a6d7-3e5ca75dcf12",
                            Name = "Borgloon"
                        },
                        new
                        {
                            Id = "f40edad9-3b57-457a-81ce-77aaa9046af9",
                            Name = "Bree"
                        },
                        new
                        {
                            Id = "fdd394b3-1823-4ec2-879c-8907f3464f80",
                            Name = "Diepenbeek"
                        },
                        new
                        {
                            Id = "da0d624d-bf04-4ecf-b1fd-a0f419daa7fd",
                            Name = "Dilsen-Stokkem"
                        },
                        new
                        {
                            Id = "11890129-10a8-4181-8bcc-da9ae74a176e",
                            Name = "Genk"
                        },
                        new
                        {
                            Id = "39723310-9a1c-4034-ba1a-ba2751c7fa30",
                            Name = "Gingelom"
                        },
                        new
                        {
                            Id = "0a42157d-1dd7-450b-a671-c503fd8420b6",
                            Name = "Halen"
                        },
                        new
                        {
                            Id = "e6c3aa4f-aff1-470b-a712-19228095b505",
                            Name = "Ham"
                        },
                        new
                        {
                            Id = "72b999b4-cfb6-4c8a-be18-c264a2f52800",
                            Name = "Hamont-Achel"
                        },
                        new
                        {
                            Id = "848b1b72-6e86-4718-aa88-c6c12de67935",
                            Name = "Hasselt"
                        },
                        new
                        {
                            Id = "421f17bf-9ba8-436f-8ae5-afa3949876a5",
                            Name = "Hechelt-Eksel"
                        },
                        new
                        {
                            Id = "c10bd937-f45d-44d9-b52f-9e0a37284cbb",
                            Name = "Heers"
                        },
                        new
                        {
                            Id = "d660ab8a-cb33-4b24-87aa-a0a235542cc9",
                            Name = "Herk-de-Stad"
                        },
                        new
                        {
                            Id = "fb00d460-00a4-4694-9cc5-29dfc03243b0",
                            Name = "Herstappe"
                        },
                        new
                        {
                            Id = "a8519f51-2d62-4d28-9ba2-080dbe98add4",
                            Name = "Heusden-Zolder"
                        },
                        new
                        {
                            Id = "ffa781da-2607-4ba3-a866-7a2f116cf357",
                            Name = "Hoeselt"
                        },
                        new
                        {
                            Id = "ae68cd26-3773-4ac2-9e36-4b2ae9f7f784",
                            Name = "Houthalen-Helchteren"
                        },
                        new
                        {
                            Id = "ce229f20-0558-4d5a-aacf-ca113b73fddd",
                            Name = "Kinrooi"
                        },
                        new
                        {
                            Id = "760d0d43-09f6-4657-a9ae-15ccc4085a4f",
                            Name = "Kortessem"
                        },
                        new
                        {
                            Id = "049b0b27-e8a1-4a18-bed7-5a509829367c",
                            Name = "Lanaken"
                        },
                        new
                        {
                            Id = "566d13d6-ac9f-4b67-8e29-0b35b1d1c358",
                            Name = "Leopoldsburg"
                        },
                        new
                        {
                            Id = "8f0c65e1-dd03-482e-9896-6d4b69b9a090",
                            Name = "Lommel"
                        },
                        new
                        {
                            Id = "ce9d5530-82dc-41cb-ab8a-d1a65a003b03",
                            Name = "Lummen"
                        },
                        new
                        {
                            Id = "02f38c68-7378-49fb-acb0-b8dd327a937e",
                            Name = "Maaseik"
                        },
                        new
                        {
                            Id = "420ba5d3-a4b8-4f06-982c-941aa9714312",
                            Name = "Maasmechelen"
                        },
                        new
                        {
                            Id = "77175dc4-2738-4292-85eb-4d002a1efaa6",
                            Name = "Nieuwerkerken"
                        },
                        new
                        {
                            Id = "87226eec-8b9c-412f-8372-0d24d8655ce5",
                            Name = "Oudsbergen"
                        },
                        new
                        {
                            Id = "18d48b43-b028-47fb-a285-ae0547d5ce7f",
                            Name = "Peer"
                        },
                        new
                        {
                            Id = "b95320ba-c674-42d1-b5f9-40f44ea50bd7",
                            Name = "Pelt"
                        },
                        new
                        {
                            Id = "ec4c91b4-19a1-42de-b798-1d838e376c8e",
                            Name = "Riemst"
                        },
                        new
                        {
                            Id = "cb46e81e-872f-4cfd-b583-bbfa347d4408",
                            Name = "Sint-Truiden"
                        },
                        new
                        {
                            Id = "a16c75c5-1f41-4aa5-9d42-0fc65b2b9b01",
                            Name = "Tessenderlo"
                        },
                        new
                        {
                            Id = "20c5c2fd-448c-4d20-a6c1-a700a624eff5",
                            Name = "Tongeren"
                        },
                        new
                        {
                            Id = "32139788-73db-415a-8148-3526f2e0f8e1",
                            Name = "Voeren"
                        },
                        new
                        {
                            Id = "bdd7e114-bcc8-48b8-8c93-db43cae1d66d",
                            Name = "Wellen"
                        },
                        new
                        {
                            Id = "91dac0d7-a73c-45c4-a6f5-3ab0b09df448",
                            Name = "Zonhoven"
                        },
                        new
                        {
                            Id = "5e7b1e29-c4df-4c6f-972d-c1b3366ec779",
                            Name = "Zutendaal"
                        });
                });

            modelBuilder.Entity("Signawel.Domain.ReportGroups.CityReportGroup", b =>
                {
                    b.Property<string>("CityId");

                    b.Property<string>("ReportGroupId");

                    b.HasKey("CityId", "ReportGroupId");

                    b.HasIndex("ReportGroupId");

                    b.ToTable("city_report_group");
                });

            modelBuilder.Entity("Signawel.Domain.ReportGroups.Email", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnName("emailaddress")
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("emails_reportgroups");
                });

            modelBuilder.Entity("Signawel.Domain.ReportGroups.EmailReportGroup", b =>
                {
                    b.Property<string>("EmailId");

                    b.Property<string>("ReportGroupId");

                    b.HasKey("EmailId", "ReportGroupId");

                    b.HasIndex("ReportGroupId");

                    b.ToTable("email_report_group");
                });

            modelBuilder.Entity("Signawel.Domain.ReportGroups.ReportGroup", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("reportgroups");
                });

            modelBuilder.Entity("Signawel.Domain.Reports.Report", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Cities")
                        .HasColumnName("cities");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("creation_time");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .IsUnicode(true);

                    b.Property<string>("IssueId")
                        .HasColumnName("issue_id");

                    b.Property<string>("RoadworkId")
                        .IsRequired()
                        .HasColumnName("roadwork_id")
                        .IsUnicode(true);

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnName("sender_email")
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("reports");
                });

            modelBuilder.Entity("Signawel.Domain.Reports.ReportDefaultIssue", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .IsUnicode(true);

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("report_default_issues");
                });

            modelBuilder.Entity("Signawel.Domain.Reports.ReportImage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnName("image_id");

                    b.Property<string>("ReportId")
                        .HasColumnName("report_id");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ReportId");

                    b.ToTable("report_images");
                });

            modelBuilder.Entity("Signawel.Domain.RoadworkSchema", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("schema_id");

                    b.Property<string>("ImageId")
                        .HasColumnName("image_id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<byte>("RoadworkCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category")
                        .HasDefaultValue((byte)0);

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("roadwork_schemas");
                });

            modelBuilder.Entity("Signawel.Domain.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Signawel.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Signawel.Domain.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Signawel.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Signawel.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Signawel.Domain.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Signawel.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Signawel.Domain.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Signawel.Domain.BBox.BBox", b =>
                {
                    b.HasOne("Signawel.Domain.RoadworkSchema", "Schema")
                        .WithMany("BoundingBoxes")
                        .HasForeignKey("SchemaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Signawel.Domain.BBox.BBoxPoint", b =>
                {
                    b.HasOne("Signawel.Domain.BBox.BBox", "BBox")
                        .WithMany("Points")
                        .HasForeignKey("BBoxId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Signawel.Domain.Determination.DeterminationAnswer", b =>
                {
                    b.HasOne("Signawel.Domain.Determination.DeterminationNode", "Node")
                        .WithOne()
                        .HasForeignKey("Signawel.Domain.Determination.DeterminationAnswer", "NodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Signawel.Domain.Determination.DeterminationNode", "ParentNode")
                        .WithMany("Answers")
                        .HasForeignKey("ParentNodeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Signawel.Domain.Determination.DeterminationGraph", b =>
                {
                    b.HasOne("Signawel.Domain.Determination.DeterminationNode", "Start")
                        .WithOne()
                        .HasForeignKey("Signawel.Domain.Determination.DeterminationGraph", "StartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Signawel.Domain.LoginRecord", b =>
                {
                    b.HasOne("Signawel.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Signawel.Domain.RefreshToken", b =>
                {
                    b.HasOne("Signawel.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Signawel.Domain.ReportGroups.CityReportGroup", b =>
                {
                    b.HasOne("Signawel.Domain.ReportGroups.City", "City")
                        .WithMany("CityReportGroups")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Signawel.Domain.ReportGroups.ReportGroup", "ReportGroup")
                        .WithMany("CityReportGroups")
                        .HasForeignKey("ReportGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Signawel.Domain.ReportGroups.EmailReportGroup", b =>
                {
                    b.HasOne("Signawel.Domain.ReportGroups.Email", "Email")
                        .WithMany("EmailReportGroups")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Signawel.Domain.ReportGroups.ReportGroup", "ReportGroup")
                        .WithMany("EmailReportGroups")
                        .HasForeignKey("ReportGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Signawel.Domain.Reports.ReportImage", b =>
                {
                    b.HasOne("Signawel.Domain.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Signawel.Domain.Reports.Report", "Report")
                        .WithMany("Images")
                        .HasForeignKey("ReportId");
                });

            modelBuilder.Entity("Signawel.Domain.RoadworkSchema", b =>
                {
                    b.HasOne("Signawel.Domain.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
